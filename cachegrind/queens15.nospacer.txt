--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         8388608 B, 64 B, 16-way associative
Command:          ./cover_nospacer
Data file:        cachegrind.out.22084
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw Bc Bcm Bi Bim
Thresholds:       0.1 100 100 100 100 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
             Ir  I1mr  ILmr             Dr   D1mr  DLmr             Dw  D1mw  DLmw             Bc           Bcm     Bi    Bim 
--------------------------------------------------------------------------------
353,522,666,840 3,770 1,983 92,922,559,672 17,000 8,116 30,196,507,004 4,519 3,142 40,448,486,552 2,655,018,431 78,401 15,806  PROGRAM TOTALS

--------------------------------------------------------------------------------
             Ir I1mr ILmr             Dr  D1mr  DLmr             Dw  D1mw DLmw             Bc           Bcm     Bi    Bim  file:function
--------------------------------------------------------------------------------
298,383,138,022   31   30 91,979,166,430    93     0 28,787,490,119   182    8 40,447,781,212 2,654,994,967      0      0  /home/ricbit/work/knuth/dlx/cover_nospacer.cc:ExactCover::solve(int)
 55,134,616,723    5    5    941,954,194     0     0  1,408,372,925     0    0              0             0      0      0  /usr/include/c++/8/bits/stl_vector.h:ExactCover::solve(int)

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/8/bits/stl_vector.h
--------------------------------------------------------------------------------
            Ir I1mr ILmr          Dr D1mr DLmr            Dw D1mw DLmw    Bc Bcm Bi Bim 

-- line 88 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .        struct _Vector_impl
             .    .    .           .    .    .             .    .    .     .   .  .   .        : public _Tp_alloc_type
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	pointer _M_start;
             .    .    .           .    .    .             .    .    .     .   .  .   .  	pointer _M_finish;
             .    .    .           .    .    .             .    .    .     .   .  .   .  	pointer _M_end_of_storage;
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  	_Vector_impl()
           858    1    1           0    0    0           858    1    0     0   0  0   0  	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
             .    .    .           .    .    .             .    .    .     .   .  .   .  	{ }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
           864    2    2           0    0    0           864  104  104     0   0  0   0  	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
             .    .    .           .    .    .             .    .    .     .   .  .   .  	{ }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  #if __cplusplus >= 201103L
             .    .    .           .    .    .             .    .    .     .   .  .   .  	_Vector_impl(_Tp_alloc_type&& __a) noexcept
             .    .    .           .    .    .             .    .    .     .   .  .   .  	: _Tp_alloc_type(std::move(__a)),
         2,044    0    0           0    0    0         1,533  184  184     0   0  0   0  	  _M_start(), _M_finish(), _M_end_of_storage()
             .    .    .           .    .    .             .    .    .     .   .  .   .  	{ }
             .    .    .           .    .    .             .    .    .     .   .  .   .  #endif
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  	void _M_swap_data(_Vector_impl& __x) _GLIBCXX_NOEXCEPT
             .    .    .           .    .    .             .    .    .     .   .  .   .  	{
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  std::swap(_M_start, __x._M_start);
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  std::swap(_M_finish, __x._M_finish);
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
-- line 114 ----------------------------------------
-- line 288 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .      public:
             .    .    .           .    .    .             .    .    .     .   .  .   .        _Vector_impl _M_impl;
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        pointer
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_allocate(size_t __n)
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
         3,631    2    2           0    0    0             9    0    0   981   3  0   0  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_deallocate(pointer __p, size_t __n)
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
         4,129    2    2          11    0    0             0    0    0 2,064  15  0   0  	if (__p)
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  _Tr::deallocate(_M_impl, __p, __n);
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .      private:
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_create_storage(size_t __n)
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
           581    0    0         294    0    0           287    0    0     0   0  0   0  	this->_M_impl._M_start = this->_M_allocate(__n);
           288    0    0           0    0    0           286    0    0     0   0  0   0  	this->_M_impl._M_finish = this->_M_impl._M_start;
           581    2    2           2    0    0           287    0    0     0   0  0   0  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .      };
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .    /**
             .    .    .           .    .    .             .    .    .     .   .  .   .     *  @brief A standard container which offers fixed time access to
             .    .    .           .    .    .             .    .    .     .   .  .   .     *  individual elements in any order.
             .    .    .           .    .    .             .    .    .     .   .  .   .     *
             .    .    .           .    .    .             .    .    .     .   .  .   .     *  @ingroup sequences
-- line 321 ----------------------------------------
-- line 452 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @a __x  will not be copied
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  (i.e. capacity() == size() in the new %vector).
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  The newly-created %vector uses a copy of the allocator object used
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  by @a __x (unless the allocator traits dictate a different object).
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
             .    .    .           .    .    .             .    .    .     .   .  .   .        vector(const vector& __x)
             .    .    .           .    .    .             .    .    .     .   .  .   .        : _Base(__x.size(),
            30    1    1          20    0    0            10    0    0     0   0  0   0  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
           294    0    0          10    0    0           284    0    0     0   0  0   0  	this->_M_impl._M_finish =
           822    0    0         548    0    0           274    0    0     0   0  0   0  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
             .    .    .           .    .    .             .    .    .     .   .  .   .  				      this->_M_impl._M_start,
             .    .    .           .    .    .             .    .    .     .   .  .   .  				      _M_get_Tp_allocator());
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  #if __cplusplus >= 201103L
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @brief  %Vector move constructor.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @param  __x  A %vector of identical element and allocator types.
-- line 471 ----------------------------------------
-- line 557 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .  #endif
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  The dtor only erases the elements, and note that if the
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  elements themselves are pointers, the pointed-to memory is
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  not touched in any way.  Managing the pointer is the user's
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  responsibility.
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
            10    2    2           0    0    0             8    0    0     0   0  0   0        ~vector() _GLIBCXX_NOEXCEPT
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
         2,167    1    1       2,167  108    0             0    0    0     0   0  0   0  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
             .    .    .           .    .    .             .    .    .     .   .  .   .  		      _M_get_Tp_allocator());
             .    .    .           .    .    .             .    .    .     .   .  .   .  	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
             8    0    0           8    1    0             0    0    0     0   0  0   0        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @brief  %Vector assignment operator.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @param  __x  A %vector of identical element and allocator types.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  All the elements of @a __x are copied, but any unused capacity in
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @a __x will not be copied.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
-- line 578 ----------------------------------------
-- line 797 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .        const_reverse_iterator
             .    .    .           .    .    .             .    .    .     .   .  .   .        crend() const noexcept
             .    .    .           .    .    .             .    .    .     .   .  .   .        { return const_reverse_iterator(begin()); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  #endif
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // [23.2.4.2] capacity
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**  Returns the number of elements in the %vector.  */
             .    .    .           .    .    .             .    .    .     .   .  .   .        size_type
         1,468    0    0         284    0    0         1,184    0    0     0   0  0   0        size() const _GLIBCXX_NOEXCEPT
        12,188    0    0       4,547   36    0             1    0    0     0   0  0   0        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**  Returns the size() of the largest possible %vector.  */
             .    .    .           .    .    .             .    .    .     .   .  .   .        size_type
             .    .    .           .    .    .             .    .    .     .   .  .   .        max_size() const _GLIBCXX_NOEXCEPT
             .    .    .           .    .    .             .    .    .     .   .  .   .        { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  #if __cplusplus >= 201103L
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
-- line 814 ----------------------------------------
-- line 887 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .  			 - this->_M_impl._M_start); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  Returns true if the %vector is empty.  (Thus begin() would
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  equal end().)
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
             .    .    .           .    .    .             .    .    .     .   .  .   .        bool
             .    .    .           .    .    .             .    .    .     .   .  .   .        empty() const _GLIBCXX_NOEXCEPT
           284    0    0         284    0    0             0    0    0     0   0  0   0        { return begin() == end(); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @brief  Attempt to preallocate enough memory for specified number of
             .    .    .           .    .    .             .    .    .     .   .  .   .         *          elements.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @param  __n  Number of elements required.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @throw  std::length_error  If @a n exceeds @c max_size().
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  This function attempts to reserve enough memory for the
-- line 903 ----------------------------------------
-- line 922 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @return  Read/write reference to data.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  This operator allows for easy, array-style, data access.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  Note that data access with this operator is unchecked and
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  out_of_range lookups are not defined. (For checked lookups
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  see at().)
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
             .    .    .           .    .    .             .    .    .     .   .  .   .        reference
 3,648,236,438    1    1           0    0    0             0    0    0     0   0  0   0        operator[](size_type __n) _GLIBCXX_NOEXCEPT
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	__glibcxx_requires_subscript(__n);
51,486,387,599    4    4 941,956,562    0    0 1,408,372,925    0    0     0   0  0   0  	return *(this->_M_impl._M_start + __n);
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        /**
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @brief  Subscript access to the data contained in the %vector.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @param __n The index of the element for which data should be
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  accessed.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  @return  Read-only (constant) reference to data.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  This operator allows for easy, array-style, data access.
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  Note that data access with this operator is unchecked and
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  out_of_range lookups are not defined. (For checked lookups
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  see at().)
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
             .    .    .           .    .    .             .    .    .     .   .  .   .        const_reference
         1,136    1    1         284    0    0           284    0    0     0   0  0   0        operator[](size_type __n) const _GLIBCXX_NOEXCEPT
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	__glibcxx_requires_subscript(__n);
         6,516    2    2       2,368    0    0             0    0    0     0   0  0   0  	return *(this->_M_impl._M_start + __n);
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .      protected:
             .    .    .           .    .    .             .    .    .     .   .  .   .        /// Safety check used only from at().
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_range_check(size_type __n) const
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	if (__n >= this->size())
-- line 959 ----------------------------------------
-- line 1068 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  element at the end of the %vector and assigns the given data
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  to it.  Due to the nature of a %vector this operation can be
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  done in constant time if the %vector has preallocated space
             .    .    .           .    .    .             .    .    .     .   .  .   .         *  available.
             .    .    .           .    .    .             .    .    .     .   .  .   .         */
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        push_back(const value_type& __x)
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
         4,716    1    1       3,144    0    0             0    0    0 1,572 251  0   0  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  {
             .    .    .           .    .    .             .    .    .     .   .  .   .  	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
             .    .    .           .    .    .             .    .    .     .   .  .   .  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
             .    .    .           .    .    .             .    .    .     .   .  .   .  				     __x);
           595    0    0         595    0    0             0    0    0     0   0  0   0  	    ++this->_M_impl._M_finish;
             .    .    .           .    .    .             .    .    .     .   .  .   .  	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  }
             .    .    .           .    .    .             .    .    .     .   .  .   .  	else
         4,885    2    2          20    0    0           977    0    0     0   0  0   0  	  _M_realloc_insert(end(), __x);
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  #if __cplusplus >= 201103L
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        push_back(value_type&& __x)
             .    .    .           .    .    .             .    .    .     .   .  .   .        { emplace_back(std::move(__x)); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        template<typename... _Args>
-- line 1093 ----------------------------------------
-- line 1458 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Called by the second initialize_dispatch above
             .    .    .           .    .    .             .    .    .     .   .  .   .        template<typename _ForwardIterator>
             .    .    .           .    .    .             .    .    .     .   .  .   .  	void
             .    .    .           .    .    .             .    .    .     .   .  .   .  	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
             .    .    .           .    .    .             .    .    .     .   .  .   .  			    std::forward_iterator_tag)
             .    .    .           .    .    .             .    .    .     .   .  .   .  	{
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  const size_type __n = std::distance(__first, __last);
             2    0    0           0    0    0             2    0    0     0   0  0   0  	  this->_M_impl._M_start = this->_M_allocate(__n);
             4    1    1           0    0    0             2    0    0     0   0  0   0  	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
             2    0    0           0    0    0             2    1    0     0   0  0   0  	  this->_M_impl._M_finish =
             .    .    .           .    .    .             .    .    .     .   .  .   .  	    std::__uninitialized_copy_a(__first, __last,
             .    .    .           .    .    .             .    .    .     .   .  .   .  					this->_M_impl._M_start,
             .    .    .           .    .    .             .    .    .     .   .  .   .  					_M_get_Tp_allocator());
             .    .    .           .    .    .             .    .    .     .   .  .   .  	}
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Called by the first initialize_dispatch above and by the
             .    .    .           .    .    .             .    .    .     .   .  .   .        // vector(n,value,a) constructor.
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
-- line 1476 ----------------------------------------
-- line 1479 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .  	this->_M_impl._M_finish =
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
             .    .    .           .    .    .             .    .    .     .   .  .   .  					_M_get_Tp_allocator());
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .  #if __cplusplus >= 201103L
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Called by the vector(n) constructor.
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             4    0    0           2    0    0             1    0    0     0   0  0   0        _M_default_initialize(size_type __n)
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
             3    0    0           0    0    0             3    0    0     0   0  0   0  	this->_M_impl._M_finish =
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
             .    .    .           .    .    .             .    .    .     .   .  .   .  					   _M_get_Tp_allocator());
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  #endif
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Internal assign functions follow.  The *_aux functions do the actual
             .    .    .           .    .    .             .    .    .     .   .  .   .        // assignment work for the range versions.
             .    .    .           .    .    .             .    .    .     .   .  .   .  
-- line 1497 ----------------------------------------
-- line 1634 ----------------------------------------
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_emplace_aux(const_iterator __position, value_type&& __v)
             .    .    .           .    .    .             .    .    .     .   .  .   .        { return _M_insert_rval(__position, std::move(__v)); }
             .    .    .           .    .    .             .    .    .     .   .  .   .  #endif
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Called by _M_fill_insert, _M_insert_aux etc.
             .    .    .           .    .    .             .    .    .     .   .  .   .        size_type
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_check_len(size_type __n, const char* __s) const
             .    .    .           .    .    .             .    .    .     .   .  .   .        {
         1,964    0    0       1,954    0    0            10    0    0     0   0  0   0  	if (max_size() - size() < __n)
             .    .    .           .    .    .             .    .    .     .   .  .   .  	  __throw_length_error(__N(__s));
             .    .    .           .    .    .             .    .    .     .   .  .   .  
         3,652    2    2         977    0    0           987    0    0     0   0  0   0  	const size_type __len = size() + std::max(size(), __n);
         3,455    1    1           0    0    0             0    0    0 1,382   6  0   0  	return (__len < size() || __len > max_size()) ? max_size() : __len;
             .    .    .           .    .    .             .    .    .     .   .  .   .        }
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Internal erase functions follow.
             .    .    .           .    .    .             .    .    .     .   .  .   .  
             .    .    .           .    .    .             .    .    .     .   .  .   .        // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
             .    .    .           .    .    .             .    .    .     .   .  .   .        // _M_assign_aux.
             .    .    .           .    .    .             .    .    .     .   .  .   .        void
             .    .    .           .    .    .             .    .    .     .   .  .   .        _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1654 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/ricbit/work/knuth/dlx/cover_nospacer.cc
--------------------------------------------------------------------------------
            Ir I1mr ILmr            Dr D1mr DLmr            Dw D1mw DLmw            Bc         Bcm Bi Bim 

-- line 25 ----------------------------------------
             .    .    .             .    .    .             .    .    .             .           .  .   .    int right;
             .    .    .             .    .    .             .    .    .             .           .  .   .  };
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .  class Graph {
             .    .    .             .    .    .             .    .    .             .           .  .   .   public:
             .    .    .             .    .    .             .    .    .             .           .  .   .    Graph(const vector<Header>& header, const vector<Node>& nodes, const vector<string>& names)
             .    .    .             .    .    .             .    .    .             .           .  .   .        : last_header(begin(header), end(header)),
             .    .    .             .    .    .             .    .    .             .           .  .   .          last_nodes(begin(nodes), end(nodes)),
             2    1    1             0    0    0             2    1    0             0           0  0   0          names(names), frame(0) {
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void graph(const vector<Header>& header, const vector<Node>& nodes) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      ostringstream oss;
             .    .    .             .    .    .             .    .    .             .           .  .   .      //cout << "creating frame " << frame << "\n";
             .    .    .             .    .    .             .    .    .             .           .  .   .      oss << "frame" << frame++ << ".dot";
             .    .    .             .    .    .             .    .    .             .           .  .   .      ofstream ofs;
             .    .    .             .    .    .             .    .    .             .           .  .   .      ofs.open(oss.str());
-- line 41 ----------------------------------------
-- line 86 ----------------------------------------
             .    .    .             .    .    .             .    .    .             .           .  .   .      ofs << "] ;\n";
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Header> last_header;
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Node> last_nodes;
             .    .    .             .    .    .             .    .    .             .           .  .   .    const vector<string>& names;
             .    .    .             .    .    .             .    .    .             .           .  .   .    int frame;
             .    .    .             .    .    .             .    .    .             .           .  .   .  };
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             3    0    0             1    0    0             1    0    0             0           0  0   0  class ExactCover {
             .    .    .             .    .    .             .    .    .             .           .  .   .   public:
            14    2    2             1    0    0             7    0    0             0           0  0   0    ExactCover(
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<string>& items,
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<vector<string>>& options)
             .    .    .             .    .    .             .    .    .             .           .  .   .        : header(build_header(items)), nodes(build_nodes(items, options)),
             4    1    1             0    0    0             4    1    0             0           0  0   0          names(items), solution(options.size()), graph(header, nodes, items) {
            11    0    0             9    3    0             0    0    0             1           1  0   0    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void print() {
             .    .    .             .    .    .             .    .    .             .           .  .   .      cout << "nodes " << nodes.size() << "\n";
             .    .    .             .    .    .             .    .    .             .           .  .   .      auto print_line = [&](int j, int size, auto func) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        for (int i = j * 8; i < j * 8 + 8 && i < size; i++) {
             .    .    .             .    .    .             .    .    .             .           .  .   .          cout << func(i) << "\t";
             .    .    .             .    .    .             .    .    .             .           .  .   .        }
             .    .    .             .    .    .             .    .    .             .           .  .   .        cout << "\n";
-- line 109 ----------------------------------------
-- line 123 ----------------------------------------
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void write_dot() {
             .    .    .             .    .    .             .    .    .             .           .  .   .      graph.graph(header, nodes);
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    int run() {
             3    0    0             0    0    0             1    0    0             0           0  0   0      return solve(0);
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .   private:
 1,846,585,139    1    0             0    0    0 1,582,787,262   34    4             0           0  0   0    int solve(int level) {
 1,318,989,385    1    1   527,595,754    2    0   263,797,877    0    0   263,797,877   2,280,207  0   0      if (header[0].rlink == 0) {
   263,797,877    0    0             0    0    0   263,797,877   33    4             0           0  0   0        return 1;
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
   315,858,165    1    1             0    0    0   261,518,693    0    0             0           0  0   0      int count = 0;
             .    .    .             .    .    .             .    .    .             .           .  .   .      int item = best_item();
             .    .    .             .    .    .             .    .    .             .           .  .   .      cover(item);
   740,395,274    0    0   108,678,944    0    0   261,518,693    3    0             0           0  0   0      solution[level].option = nodes[item].dlink;
 4,125,556,563    1    1 2,091,087,609    0    0   678,156,318    0    0   470,977,097  47,965,483  0   0      for (auto& option = solution[level].option; option != item; option = nodes[option].dlink) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        try_option(option, solution[level]);
 1,318,989,380    0    0   791,393,628    0    0   263,797,876    0    0             0           0  0   0        count += solve(level + 1);
   527,595,752    0    0   527,595,752    0    0             0    0    0             0           0  0   0        rewind_option(option, solution[level]);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      uncover(item);
             .    .    .             .    .    .             .    .    .             .           .  .   .      return count;
 2,374,180,893    0    0 2,110,383,016    0    0             0    0    0             0           0  0   0    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    int best_item() {
             .    .    .             .    .    .             .    .    .             .           .  .   .      int best = header[0].rlink;
   784,556,079    0    0   523,037,386    1    0             0    0    0             0           0  0   0      int value = nodes[best].top;
24,834,024,538    2    2 7,686,250,217   13    0   647,779,098    0    0 7,470,323,851 220,340,761  0   0      for (int p = header[best].rlink; p != 0; p = header[p].rlink) {
29,008,507,412    0    0 7,252,126,853   20    0             0    0    0 7,252,126,853 286,113,951  0   0        if (nodes[p].top < value) {
             .    .    .             .    .    .             .    .    .             .           .  .   .          best = p;
             .    .    .             .    .    .             .    .    .             .           .  .   .          value = nodes[p].top;
 1,110,912,071    0    0             0    0    0    43,321,695    0    0   266,897,594  49,043,595  0   0          if (value == 0) {
             .    .    .             .    .    .             .    .    .             .           .  .   .            break;
             .    .    .             .    .    .             .    .    .             .           .  .   .          }
             .    .    .             .    .    .             .    .    .             .           .  .   .        }
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      return best;
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    template<typename T, typename P, typename Q>
             .    .    .             .    .    .             .    .    .             .           .  .   .    void option_right_edges(int option, T action, P action_right, Q action_left) {
 3,020,713,034    1    1   199,110,330    0    0             0    0    0             0           0  0   0      auto p = option + 1;
15,652,354,523    2    2 3,821,902,372   27    0             0    0    0 3,622,792,042 251,425,339  0   0      if (nodes[option].top > 0) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        do {
             .    .    .             .    .    .             .    .    .             .           .  .   .          action(p);
17,012,249,922    1    1 4,133,877,532    0    0             0    0    0 4,722,257,376 277,305,352  0   0        } while (nodes[p++].top > 0);
             .    .    .             .    .    .             .    .    .             .           .  .   .        action_right(p - 1);
             .    .    .             .    .    .             .    .    .             .           .  .   .      } else {
             .    .    .             .    .    .             .    .    .             .           .  .   .        action_right(option);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
40,137,050,409    5    5 9,723,758,948   18    0             0    0    0 9,511,837,002 283,529,997  0   0      for (p = option - 1; nodes[p].top > 0; p--) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        action(p);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      action_left(p + 1);
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    template<typename T>
             .    .    .             .    .    .             .    .    .             .           .  .   .    void option_right(int option, T action) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      auto dummy = [](int x){};
             .    .    .             .    .    .             .    .    .             .           .  .   .      option_right_edges(option, action, dummy, dummy);
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    template<typename T>
             .    .    .             .    .    .             .    .    .             .           .  .   .    void option_left(int option, const Solution& sol, T action) {
 2,260,463,884    0    0   211,921,946    0    0             0    0    0   494,466,104 122,136,571  0   0      for (auto p = sol.left; p != option; p++) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        action(p);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
 5,019,495,812    1    1   925,816,412    0    0             0    0    0   852,177,720 127,304,838  0   0      for (auto p = sol.right; p != option; p--) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        action(p);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void try_option(int option, Solution& sol) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      option_right_edges(option, [&](int p) {
 3,530,279,064    0    0   588,379,844    0    0             0    0    0             0           0  0   0        cover(abs(nodes[p].top));
             .    .    .             .    .    .             .    .    .             .           .  .   .      }, [&sol](int right) {
 1,282,402,482    2    2   622,793,377    0    0   350,441,266    6    0             0           0  0   0        sol.right = right;
             .    .    .             .    .    .             .    .    .             .           .  .   .      }, [&sol](int left) {
   527,595,752    0    0   263,797,876    0    0   263,797,876    0    0             0           0  0   0        sol.left = left;
             .    .    .             .    .    .             .    .    .             .           .  .   .      });
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void rewind_option(int option, const Solution& sol) {
   263,797,876    1    1   263,797,876    0    0             0    0    0             0           0  0   0      option_left(option, sol, [&](int p) {
 4,095,240,360    1    1 1,638,096,144    0    0             0    0    0             0           0  0   0        uncover(abs(nodes[p].top));
             .    .    .             .    .    .             .    .    .             .           .  .   .      });
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void cover(int i) {
11,203,109,837    2    2 3,240,915,850    0    0             0    0    0 2,760,063,848 294,989,759  0   0      for (auto p = nodes[i].dlink; p != i; p = nodes[p].dlink) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        hide(p);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
 1,080,566,765    0    0 1,080,566,765    0    0             0    0    0             0           0  0   0      auto l = header[i].llink;
   819,048,072    0    0   819,048,072    0    0             0    0    0             0           0  0   0      auto r = header[i].rlink;
 1,080,566,765    0    0             0    0    0 1,080,566,765    0    0             0           0  0   0      header[l].rlink = r;
 1,080,566,765    0    0             0    0    0 1,080,566,765    0    0             0           0  0   0      header[r].llink = l;
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void uncover(int i) {
   819,048,072    1    1             0    0    0             0    0    0             0           0  0   0      auto l = header[i].llink;
 1,080,566,765    1    1 1,080,566,765    0    0             0    0    0             0           0  0   0      auto r = header[i].rlink;
 2,422,652,223    0    0 1,342,085,458    0    0 1,080,566,765    0    0             0           0  0   0      header[l].rlink = i;
 1,080,566,765    0    0             0    0    0 1,080,566,765    0    0             0           0  0   0      header[r].llink = i;
11,136,616,277    3    3 2,760,063,848    0    0             0    0    0 2,760,063,848 692,559,114  0   0      for (auto p = nodes[i].ulink; p != i; p = nodes[p].ulink) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        unhide(p);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void hide(int p) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      option_right(p, [&](int q) {
10,334,693,830    1    1 4,133,877,532    8    0             0    0    0             0           0  0   0        auto x = abs(nodes[q].top);
 9,792,254,264    0    0 4,896,127,132    3    0             0    0    0             0           0  0   0        auto u = nodes[q].ulink;
 4,896,127,132    0    0 4,896,127,132    1    0             0    0    0             0           0  0   0        auto d = nodes[q].dlink;
 9,792,254,264    1    1             0    0    0 4,896,127,132   24    0             0           0  0   0        nodes[u].dlink = d;
 9,792,254,264    0    0             0    0    0 4,896,127,132   82    0             0           0  0   0        nodes[d].ulink = u;
 9,030,004,664    0    0 4,896,127,132    0    0             0    0    0             0           0  0   0        nodes[x].top--;
             .    .    .             .    .    .             .    .    .             .           .  .   .      });
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void unhide(int p) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      option_right(p, [&](int q) {
10,334,693,830    1    1 4,133,877,532    0    0             0    0    0             0           0  0   0        auto x = abs(nodes[q].top);
             .    .    .             .    .    .             .    .    .             .           .  .   .        auto u = nodes[q].ulink;
 4,896,127,132    0    0 4,896,127,132    0    0             0    0    0             0           0  0   0        auto d = nodes[q].dlink;
14,688,381,396    0    0 4,896,127,132    0    0 4,896,127,132    0    0             0           0  0   0        nodes[u].dlink = q;
 9,792,254,264    1    1             0    0    0 4,896,127,132    0    0             0           0  0   0        nodes[d].ulink = q;
11,859,193,030    0    0 4,896,127,132    0    0             0    0    0             0           0  0   0        nodes[x].top++;
             .    .    .             .    .    .             .    .    .             .           .  .   .      });
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    void dump_current() {
             .    .    .             .    .    .             .    .    .             .           .  .   .      cout << "items remaining: ";
             .    .    .             .    .    .             .    .    .             .           .  .   .      for (int t = 0; header[t].rlink != 0;) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        t = header[t].rlink;
             .    .    .             .    .    .             .    .    .             .           .  .   .        cout << names[t] << " ";
-- line 263 ----------------------------------------
-- line 287 ----------------------------------------
             .    .    .             .    .    .             .    .    .             .           .  .   .      for (p = p + 1; abs(nodes[p].top) > 0; p++) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        cout << names[abs(nodes[p].top)] << " ";
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    int count_nodes(
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<string>& items,
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<vector<string>>& options) {
             1    0    0             0    0    0             0    0    0             0           0  0   0      int total_nodes = 2 + items.size();
           573    0    0             2    0    0             0    0    0           285          11  0   0      for (const auto& option : options) {
           284    0    0             0    0    0             0    0    0             0           0  0   0        total_nodes += 1 + option.size();
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      return total_nodes;
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Header> build_header(
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<string>& items) {
             1    0    0             1    0    0             0    0    0             0           0  0   0      vector<Header> header(items.size() + 1);
             1    0    0             0    0    0             0    0    0             0           0  0   0      int size = items.size();
           322    1    1             0    0    0             0    0    0           106           2  0   0      for (int i = 0; i <= size; i++) {
           315    0    0             0    0    0             0    0    0           105           6  0   0        if (i == 0) {
             3    0    0             0    0    0             2    0    0             0           0  0   0          header[i] = { size, 1 };
             .    .    .             .    .    .             .    .    .             .           .  .   .        } else {
           626    1    1             0    0    0           208    0    0             0           0  0   0          header[i] = { i - 1, (i + 1) % (size + 1) };
             .    .    .             .    .    .             .    .    .             .           .  .   .        }
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      return header;
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Node> build_nodes(
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<string>& items,
             .    .    .             .    .    .             .    .    .             .           .  .   .        const vector<vector<string>>& options) {
             1    0    0             0    0    0             0    0    0             0           0  0   0      vector<Node> nodes(count_nodes(items, options));
             .    .    .             .    .    .             .    .    .             .           .  .   .      vector<int> last(items.size() + 1);
             .    .    .             .    .    .             .    .    .             .           .  .   .      unordered_map<string, int> name;
           315    0    0           104    0    0             0    0    0           105          12  0   0      for (int i = 1; i <= int(items.size()); i++) {
           312    0    0             0    0    0           312    5    0             0           0  0   0        nodes[i] = {0, i, i};
           208    0    0           104    0    0           104    0    0             0           0  0   0        last[i] = i;
           104    0    0             0    0    0           104    0    0             0           0  0   0        name[items[i - 1]] = i;
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             1    0    0             0    0    0             0    0    0             0           0  0   0      int current = items.size() + 1;
             5    0    0             0    0    0             3    0    0             0           0  0   0      nodes[current++] = { 0, 0, 0 };
           575    1    1             2    0    0             1    0    0           285           5  0   0      for (int i = 0; i < int(options.size()); i++) {
         7,395    1    1         2,936   71    0           568    0    0         1,468         212  0   0        for (int j = 0; j < int(options[i].size()); j++) {
         2,368    0    0         1,184    0    0             0    0    0             0           0  0   0          int item = name[options[i][j]];
         2,368    0    0         2,368    3    0             0    0    0             0           0  0   0          nodes[item].top++;
         4,736    1    1         2,368    0    0         1,184   22    0             0           0  0   0          nodes[last[item]].dlink = current;
         1,184    0    0             0    0    0         1,184    1    0             0           0  0   0          nodes[item].ulink = current;
         1,184    0    0             0    0    0         1,184   73    0             0           0  0   0          nodes[current].top = item;
         4,736    0    0         2,368    0    0         1,184    0    0             0           0  0   0          nodes[current].ulink = last[item];
         1,184    0    0             0    0    0         1,184  143    0             0           0  0   0          nodes[current].dlink = item;
         1,184    0    0             0    0    0         1,184    0    0             0           0  0   0          last[item] = current;
         2,368    0    0             0    0    0         1,184    0    0             0           0  0   0          current++;
             .    .    .             .    .    .             .    .    .             .           .  .   .        }
           568    0    0             0    0    0           284    0    0             0           0  0   0        nodes[current - 1].top *= -1;
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .      return nodes;
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Header> header;
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Node> nodes;
             .    .    .             .    .    .             .    .    .             .           .  .   .    const vector<string>& names;
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<Solution> solution;
             .    .    .             .    .    .             .    .    .             .           .  .   .    Graph graph;
             .    .    .             .    .    .             .    .    .             .           .  .   .  };
             .    .    .             .    .    .             .    .    .             .           .  .   .  
         3,420    2    2           285    0    0         1,995    0    0             0           0  0   0  vector<string> parse_line(const string& line) {
             .    .    .             .    .    .             .    .    .             .           .  .   .    istringstream iss(line);
             .    .    .             .    .    .             .    .    .             .           .  .   .    vector<string> items;
             .    .    .             .    .    .             .    .    .             .           .  .   .    string item;
         9,438    2    2         3,146    0    0         1,573    0    0         1,573           6  0   0    while (iss >> item) {
             .    .    .             .    .    .             .    .    .             .           .  .   .      items.push_back(item);
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             .    .    .             .    .    .             .    .    .             .           .  .   .    return items;
         3,420    0    0         2,565    0    0             0    0    0           285           2  0   0  }
             .    .    .             .    .    .             .    .    .             .           .  .   .  
            10    2    2             1    0    0             7    0    0             0           0  0   0  int main() {
             .    .    .             .    .    .             .    .    .             .           .  .   .    string line;
             .    .    .             .    .    .             .    .    .             .           .  .   .    getline(cin, line);
             6    1    1             0    0    0             3    0    0             0           0  0   0    vector<string> items = parse_line(line);
             2    0    0             0    0    0             1    0    0             0           0  0   0    vector<vector<string>> options;
           855    0    0           570    0    0             0    0    0           285           1  0   0    while (getline(cin, line)) {
           855    0    0           284    0    0           285    0    0             0           0  0   0      vector<string> option = parse_line(line);
           568    0    0           284    0    0             0    0    0           284           0  0   0      if (!option.empty()) {
             .    .    .             .    .    .             .    .    .             .           .  .   .        options.push_back(option);
             .    .    .             .    .    .             .    .    .             .           .  .   .      }
             .    .    .             .    .    .             .    .    .             .           .  .   .    }
             9    1    1             2    0    0             2    0    0             0           0  0   0    ExactCover ec(items, options);
             .    .    .             .    .    .             .    .    .             .           .  .   .    //ec.print();
             .    .    .             .    .    .             .    .    .             .           .  .   .    //ec.write_dot();
             6    1    1             0    0    0             2    0    0             0           0  0   0    cout << "Number of solutions: " << ec.run() << "\n";
             .    .    .             .    .    .             .    .    .             .           .  .   .    return 0;
            14    1    1             9    1    0             0    0    0             1           0  0   0  }

--------------------------------------------------------------------------------
 Ir I1mr ILmr  Dr D1mr DLmr  Dw D1mw DLmw  Bc Bcm Bi Bim 
--------------------------------------------------------------------------------
100    2    4 100    2    0 100   16    9 100 100  0   0  percentage of events annotated

